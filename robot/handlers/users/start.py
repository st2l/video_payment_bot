import logging
from random import randint
from datetime import datetime

from asgiref.sync import sync_to_async
from robot.models import TelegramUser, Video
import asyncio

from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart

from loader import dp
from robot.keyboards.inline import oznakomlen_kb, prosmotreno_kb, tarrifs_n_withdraw, oformit_individual
from robot.utils import send_video

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message, state: FSMContext):
    telegram_user, _ = await TelegramUser.objects.aget_or_create(chat_id=message.from_user.id, can_watch=5)
    user = await sync_to_async(telegram_user.get_user, thread_sensitive=True)()

    text = f"""
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}!
üî• –ú—ã —Å–æ–µ–¥–∏–Ω—è–µ–º —Ä–µƒ∏–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π –∏ –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ó–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
—Ä–µƒ∏–ª–∞–º–Ω—ã—Ö —Ä–æ–ª–∏ƒ∏–æ–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏.
‚ùå –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ - –û—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã, –¥–µ–ª–∞—Ç—å –∑–∞ƒ∏–∞–∑, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å
—Ä–µƒ∏–ª–∞–º–µ.
üîç –í–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—åƒ∏–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ.
üëÄ –ó–∞ ƒ∏–∞–∂–¥—ã–π —Ä–µƒ∏–ª–∞–º–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º—ã –ø–ª–∞—Ç–∏–º 0.5 $.
–ñ–º–∏ "‚úÖ –û–∑–Ω–∞ƒ∏–æ–º–ª–µ–Ω", —á—Ç–æ–±—ã —É–∂–µ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å."""

    await message.answer(text, reply_markup=await oznakomlen_kb())


@dp.callback_query_handler(lambda call: call.data == 'oznakomlen')
async def oznacomlen(callback: types.CallbackQuery, state: FSMContext):
    telegram_user, _ = await TelegramUser.objects.aget_or_create(chat_id=callback.from_user.id)
    user = await sync_to_async(telegram_user.get_user, thread_sensitive=True)()

    telegram_user.balance = 0
    await sync_to_async(telegram_user.save, thread_sensitive=True)()

    await callback.message.edit_text('–ó–∞–≥—Ä—É–∑–∫–∞...\n[\t\t\t\t\t\t] 0%')
    await asyncio.sleep(0.5)
    await callback.message.edit_text('–ó–∞–≥—Ä—É–∑–∫–∞...\n[====\t\t\t\t\t] 10%')
    await asyncio.sleep(0.5)
    await callback.message.edit_text('–ó–∞–≥—Ä—É–∑–∫–∞...\n[==========  \t\t] 30%')
    await asyncio.sleep(0.5)
    await callback.message.edit_text('–ó–∞–≥—Ä—É–∑–∫–∞...\n[===============\t] 60%')
    await asyncio.sleep(0.5)
    await callback.message.edit_text('–ó–∞–≥—Ä—É–∑–∫–∞...\n[==================] 100%')
    await asyncio.sleep(0.5)

    await callback.message.edit_text('‚úÖ –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!')
    msg = await callback.message.answer(text="""‚úÖ–û—Ç–ª–∏—á–Ω–æ! –í—ã –≥–æ—Ç–æ–≤—ã ƒ∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
‚ùó –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞–∂–∏–º–∞—Ç—å ƒ∏–Ω–æ–øƒ∏—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" –Ω–µ—Åƒ∏–æ–ª—åƒ∏–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.
–í—ã —Å–º–æ–∂–µ—Ç–µ –µ–µ –Ω–∞–∂–∞—Ç—å —Ç–æ–ª—åƒ∏–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, ƒ∏–∞ƒ∏ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –≤–∞—à –ø—Ä–æ—Å–º–æ—Ç—Ä.
‚ùó –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Åƒ∏–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å.""")

    await asyncio.sleep(6)
    await msg.delete()

    # -- -- -- -- -- -- -- -- -- --
    # sending a first video

    video = await send_video()

    await callback.answer()
    await callback.message.answer_video(
        caption=f"""üì± –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: 0.5$
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: 0 –∏–∑ 5
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {telegram_user.balance} $""",
        video=open(str(video), 'rb'),
        reply_markup=await prosmotreno_kb(dt='first_prosomtreno')
    )


@dp.callback_query_handler(lambda call: call.data == 'first_prosomtreno')
async def first_prosmotreno(callback: types.CallbackQuery, state: FSMContext):
    telegram_user, _ = await TelegramUser.objects.aget_or_create(chat_id=callback.from_user.id)
    user = await sync_to_async(telegram_user.get_user, thread_sensitive=True)()

    telegram_user.balance = telegram_user.balance + 0.5
    await sync_to_async(telegram_user.save, thread_sensitive=True)()

    await callback.message.answer(f'‚úÖ –í–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ\n–ë–∞–ª–∞–Ω—Å {telegram_user.balance - 0.5}$ -> {telegram_user.balance}$')

    msg = await callback.message.answer(
        text="""üéÅ –ë–æ–Ω—É—Å 10$ : –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!
‚Ä¢ –ë–∞–ª–∞–Ω—Å: 0.5$ ‚Üí 10.50$
–ó–∞—Ö–æ–¥–∏—Ç–µ ƒ∏–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤ –æ—Ç –Ω–∞—à–µ–π
–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!""",
    )
    telegram_user.balance = telegram_user.balance + 10
    await sync_to_async(telegram_user.save, thread_sensitive=True)()
    await asyncio.sleep(5)
    await msg.delete()

    video = await send_video()
    await callback.answer()
    await callback.message.answer_video(
        video=open(str(video), 'rb'),
        caption=f"""üì± –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: 0.5$
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: 1 –∏–∑ 5
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {telegram_user.balance}$""",
        reply_markup=await prosmotreno_kb(dt='second_prosomtreno')
    )


@dp.callback_query_handler(lambda call: call.data == 'second_prosomtreno')
async def second_prosmotreno(callback: types.CallbackQuery, state: FSMContext):
    telegram_user, _ = await TelegramUser.objects.aget_or_create(chat_id=callback.from_user.id)
    user = await sync_to_async(telegram_user.get_user, thread_sensitive=True)()

    telegram_user.balance = telegram_user.balance + 0.5
    await sync_to_async(telegram_user.save, thread_sensitive=True)()

    await callback.message.answer(f'‚úÖ –í–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ\n–ë–∞–ª–∞–Ω—Å {telegram_user.balance - 0.5}$ -> {telegram_user.balance}$')

    video = await send_video()
    await callback.answer()
    await callback.message.answer_video(
        video=open(str(video), 'rb'),
        caption=f"""üì± –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: 0.5$
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: 2 –∏–∑ 5
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {telegram_user.balance}$""",
        reply_markup=await prosmotreno_kb(dt='third_prosomtreno')
    )


@dp.callback_query_handler(lambda call: call.data == 'third_prosomtreno')
async def third_prosmotreno(callback: types.CallbackQuery, state: FSMContext):
    telegram_user, _ = await TelegramUser.objects.aget_or_create(chat_id=callback.from_user.id)
    user = await sync_to_async(telegram_user.get_user, thread_sensitive=True)()

    telegram_user.balance = telegram_user.balance + 0.5
    await sync_to_async(telegram_user.save, thread_sensitive=True)()

    await callback.message.answer(f'‚úÖ –í–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ\n–ë–∞–ª–∞–Ω—Å {telegram_user.balance - 0.5}$ -> {telegram_user.balance}$')

    video = await send_video()
    await callback.answer()
    await callback.message.answer_video(
        video=open(str(video), 'rb'),
        caption=f"""üì± –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: 0.5$
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: 3 –∏–∑ 5
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {telegram_user.balance}$""",
        reply_markup=await prosmotreno_kb(dt='fourth_prosomtreno')
    )


@dp.callback_query_handler(lambda call: call.data == 'fourth_prosomtreno')
async def fourth_prosmotreno(callback: types.CallbackQuery, state: FSMContext):
    telegram_user, _ = await TelegramUser.objects.aget_or_create(chat_id=callback.from_user.id)
    user = await sync_to_async(telegram_user.get_user, thread_sensitive=True)()

    telegram_user.balance = telegram_user.balance + 0.5
    await sync_to_async(telegram_user.save, thread_sensitive=True)()

    await callback.message.answer(f'‚úÖ –í–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ\n–ë–∞–ª–∞–Ω—Å {telegram_user.balance - 0.5}$ -> {telegram_user.balance}$')

    video = await send_video()
    await callback.answer()
    await callback.message.answer_video(
        video=open(str(video), 'rb'),
        caption=f"""üì± –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: 0.5$
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: 4 –∏–∑ 5
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {telegram_user.balance}$""",
        reply_markup=await prosmotreno_kb(dt='fifth_prosomtreno')
    )


@dp.callback_query_handler(lambda call: call.data == 'fifth_prosomtreno')
async def fifth_prosmotreno(callback: types.CallbackQuery, state: FSMContext):
    telegram_user, _ = await TelegramUser.objects.aget_or_create(chat_id=callback.from_user.id)
    user = await sync_to_async(telegram_user.get_user, thread_sensitive=True)()

    telegram_user.balance = telegram_user.balance + 0.5
    await sync_to_async(telegram_user.save, thread_sensitive=True)()

    await callback.message.answer(f'‚úÖ –í–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ\n–ë–∞–ª–∞–Ω—Å {telegram_user.balance - 0.5}$ -> {telegram_user.balance}$')

    video = await send_video()
    await callback.message.answer_video(
        video=open(str(video), 'rb'),
        caption=f"""üì± –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: 0.5$
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: 5 –∏–∑ 5
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {telegram_user.balance}$""",
        reply_markup=await prosmotreno_kb(dt='sixth_prosomtreno')
    )


@dp.callback_query_handler(lambda call: call.data == 'sixth_prosomtreno')
async def sixth_prosmotreno(callback: types.CallbackQuery, state: FSMContext):
    telegram_user, _ = await TelegramUser.objects.aget_or_create(chat_id=callback.from_user.id)
    user = await sync_to_async(telegram_user.get_user, thread_sensitive=True)()

    telegram_user.balance = telegram_user.balance + 0.5
    telegram_user.can_watch = 0
    telegram_user.last_time_wathed = datetime.now().timestamp()
    await sync_to_async(telegram_user.save, thread_sensitive=True)()
    
    await callback.answer()
    await callback.message.answer(
        text=f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {telegram_user.balance}$. –ù–∞–∂–º–∏—Ç–µ "–í—ã–≤–æ–¥", —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏
—Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.
‚ùó –ù–∞ —Ç–µƒ∏—É—â–µ–º —Ç–∞—Ä–∏—Ñ–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—åƒ∏–æ 5 –≤–∏–¥–µ–æ –≤ –¥–µ–Ω—å. –ß—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å
—Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å 50 –≤–∏–¥–µ–æ –≤ –¥–µ–Ω—å, –Ω–∞–∂–º–∏—Ç–µ "–¢–∞—Ä–∏—Ñ—ã".""",
        reply_markup=await tarrifs_n_withdraw()
    )
    
